name: Upload to Telegram with Local Bot API

on:
  workflow_dispatch:
    inputs:
      date:
        description: 'Date in YYYYMMDD format'
        required: true
        type: string

permissions:
  contents: read

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download timelapse from Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          DATE='${{ github.event.inputs.date }}'
          TAG="timelapse-${DATE}"
          mkdir -p timelapse
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Found release $TAG, downloading asset"
            gh release download "$TAG" --pattern "timelapse_${DATE}.mp4" --dir timelapse --clobber
          else
            echo "‚ùå Release $TAG not found"
            exit 1
          fi

      - name: Cache apt packages
        id: cache-apt
        uses: actions/cache@v4
        with:
          path: ~/.cache/apt
          key: apt-packages-${{ runner.os }}-${{ hashFiles('**/telegram-upload.yml') }}
          restore-keys: |
            apt-packages-${{ runner.os }}-

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make git zlib1g-dev libssl-dev gperf cmake g++

      - name: Cache TDLib source
        id: cache-tdlib
        uses: actions/cache@v4
        with:
          path: tdlib-source
          key: tdlib-source-${{ runner.os }}-latest
          restore-keys: |
            tdlib-source-${{ runner.os }}-

      - name: Cache Telegram Bot API server
        id: cache-bot-api
        uses: actions/cache@v4
        with:
          path: telegram-bot-api
          key: telegram-bot-api-${{ runner.os }}-built
          restore-keys: |
            telegram-bot-api-${{ runner.os }}-

      - name: Log cache status
        run: |
          echo "=== –°—Ç–∞—Ç—É—Å –∫—ç—à–∞ ==="
          echo "TDLib cache hit: ${{ steps.cache-tdlib.outputs.cache-hit }}"
          echo "Bot API cache hit: ${{ steps.cache-bot-api.outputs.cache-hit }}"
          
          if [ "${{ steps.cache-tdlib.outputs.cache-hit }}" = "true" ]; then
            echo "‚úÖ TDLib –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞"
          else
            echo "üîÑ TDLib –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω –∑–∞–Ω–æ–≤–æ"
          fi
          
          if [ "${{ steps.cache-bot-api.outputs.cache-hit }}" = "true" ]; then
            echo "‚úÖ Bot API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞"
          else
            echo "üîÑ Bot API –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω –∑–∞–Ω–æ–≤–æ"
          fi

      - name: Get TDLib source
        if: steps.cache-tdlib.outputs.cache-hit != 'true'
        run: |
          # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          rm -rf tdlib-source
          # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π TDLib —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
          git clone --recursive https://github.com/tdlib/td.git tdlib-source
          cd tdlib-source
          # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
          git checkout v1.8.0
          # –û—á–∏—â–∞–µ–º git history –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
          rm -rf .git
          cd ..

      - name: Build Telegram Bot API server
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          rm -rf telegram-bot-api
          # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Bot API —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
          git clone --recursive https://github.com/tdlib/telegram-bot-api.git
          cd telegram-bot-api
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Using tag: $LATEST_TAG"
          git checkout $LATEST_TAG
          
          # –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          rm -rf build
          mkdir build
          cd build
          
          # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ TDLib)
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX:PATH=.. \
                -DTD_DIR=../../tdlib-source \
                ..
          cmake --build . --target install
          
          # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å
          cd ../..
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∏–Ω–∞—Ä–Ω–∏–∫ —Å–æ–∑–¥–∞–ª—Å—è
          ls -l telegram-bot-api/bin/telegram-bot-api*

      - name: Setup Bot API server
        run: |
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
          mkdir -p bot-data
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å–≤–µ–∂–µ—Å–æ–±—Ä–∞–Ω–Ω–æ–µ)
          echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ==="
          if [ -d "telegram-bot-api/bin" ]; then
            echo "‚úÖ Bot API –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ/—Å–æ–±—Ä–∞–Ω"
            ls -la telegram-bot-api/bin/
          else
            echo "‚ùå Bot API –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
          fi
          
          if [ -d "tdlib-source" ]; then
            echo "‚úÖ TDLib –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ"
            ls -la tdlib-source/ | head -5
          else
            echo "‚ùå TDLib –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
          fi

      - name: Start local Bot API server
        run: |
          # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
          ./telegram-bot-api/bin/telegram-bot-api --api-id=${{ secrets.TELEGRAM_API_ID }} \
                            --api-hash=${{ secrets.TELEGRAM_API_HASH }} \
                            --local \
                            --dir=./bot-data \
                            --temp-dir=./bot-data/temp \
                            --http-port=8081 &
          
          # –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
          sleep 10
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
          curl -f http://localhost:8081/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/getMe || exit 1

      - name: Check if timelapse exists
        id: check
        run: |
          if [ -f "timelapse/timelapse_${{ github.event.inputs.date }}.mp4" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "file_size=$(stat -f%z timelapse/timelapse_${{ github.event.inputs.date }}.mp4 2>/dev/null || stat -c%s timelapse/timelapse_${{ github.event.inputs.date }}.mp4)" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload to Telegram
        if: steps.check.outputs.exists == 'true'
        run: |
          VIDEO_FILE="timelapse/timelapse_${{ github.event.inputs.date }}.mp4"
          
          # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
          FORMATTED_DATE=$(echo "${{ github.event.inputs.date }}" | sed 's/\(.\{4\}\)\(.\{2\}\)\(.\{2\}\)/\1-\2-\3/')
          
          # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          MESSAGE=$(echo -e "ü§ñ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç–∞–π–º–ª–∞–ø—Å –∑–∞ ${FORMATTED_DATE}\n\n[üé¨ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã–º–∏ —Ç–∞–π–º–ª–∞–ø—Å–∞–º–∏](https://github.com/niklinque/wplace-tomsk-timelapse/)\n[üì∏ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –¥–∞–º–ø–∞–º–∏](https://github.com/niklinque/wplace-tomsk/)")
          
          # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π API –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–æ 2GB)
          curl -X POST "http://localhost:8081/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
               -F "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
               -F "document=@${VIDEO_FILE}" \
               -F "caption=${MESSAGE}" \
               -F "parse_mode=MARKDOWN" \
               -F "disable_content_type_detection=true" \
               --max-time 1800 \
               --retry 3 \
               --retry-delay 30
