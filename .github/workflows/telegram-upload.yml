name: Upload to Telegram with Local Bot API

on:
  workflow_dispatch:
    inputs:
      date:
        description: 'Date in YYYYMMDD format (for daily) or "weekly-YYYYMMDD-to-YYYYMMDD" for weekly timelapse'
        required: true
        type: string

permissions:
  contents: read

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Determine upload type and parse dates
        id: upload-type
        run: |
          INPUT_DATE="${{ github.event.inputs.date }}"
          
          if [[ "$INPUT_DATE" == weekly-*-to-* ]]; then
            echo "type=weekly" >> $GITHUB_OUTPUT
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ weekly-YYYYMMDD-to-YYYYMMDD
            WEEK_START=$(echo "$INPUT_DATE" | cut -d'-' -f2)
            WEEK_END=$(echo "$INPUT_DATE" | cut -d'-' -f4)
            echo "week_start=$WEEK_START" >> $GITHUB_OUTPUT
            echo "week_end=$WEEK_END" >> $GITHUB_OUTPUT
            echo "tag=weekly-timelapse-$WEEK_START-to-$WEEK_END" >> $GITHUB_OUTPUT
            echo "file_pattern=weekly_timelapse.mp4" >> $GITHUB_OUTPUT
            echo "output_file=weekly_timelapse_${WEEK_START}_to_${WEEK_END}.mp4" >> $GITHUB_OUTPUT
          else
            echo "type=daily" >> $GITHUB_OUTPUT
            echo "tag=timelapse-$INPUT_DATE" >> $GITHUB_OUTPUT
            echo "file_pattern=timelapse_$INPUT_DATE.mp4" >> $GITHUB_OUTPUT
            echo "output_file=timelapse_$INPUT_DATE.mp4" >> $GITHUB_OUTPUT
          fi

      - name: Format dates for message
        id: format-dates
        run: |
          if [ "${{ steps.upload-type.outputs.type }}" = "weekly" ]; then
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
            START_DATE="${{ steps.upload-type.outputs.week_start }}"
            END_DATE="${{ steps.upload-type.outputs.week_end }}"
            
            FORMATTED_START=$(echo "$START_DATE" | sed 's/\(....\)\(..\)\(..\)/\1-\2-\3/')
            FORMATTED_END=$(echo "$END_DATE" | sed 's/\(....\)\(..\)\(..\)/\1-\2-\3/')
            
            echo "formatted_start=$FORMATTED_START" >> $GITHUB_OUTPUT
            echo "formatted_end=$FORMATTED_END" >> $GITHUB_OUTPUT
          else
            DAILY_DATE="${{ github.event.inputs.date }}"
            FORMATTED_DAILY=$(echo "$DAILY_DATE" | sed 's/\(....\)\(..\)\(..\)/\1-\2-\3/')
            echo "formatted_daily=$FORMATTED_DAILY" >> $GITHUB_OUTPUT
          fi

      - name: Download timelapse from Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG="${{ steps.upload-type.outputs.tag }}"
          FILE_PATTERN="${{ steps.upload-type.outputs.file_pattern }}"
          OUTPUT_FILE="${{ steps.upload-type.outputs.output_file }}"
          
          mkdir -p timelapse
          if gh release view "$TAG" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            echo "Found release $TAG, downloading asset"
            gh release download "$TAG" --repo "$GITHUB_REPOSITORY" --pattern "$FILE_PATTERN" --dir timelapse --clobber
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–∫–∞—á–∞–ª—Å—è
            if [ -f "timelapse/$FILE_PATTERN" ]; then
              echo "‚úÖ File downloaded: timelapse/$FILE_PATTERN"
              # –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–ª–∞–ø—Å–∞ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
              if [ "$FILE_PATTERN" != "$OUTPUT_FILE" ]; then
                mv "timelapse/$FILE_PATTERN" "timelapse/$OUTPUT_FILE"
                echo "‚úÖ File renamed to: timelapse/$OUTPUT_FILE"
              fi
            else
              echo "‚ùå File $FILE_PATTERN not found in release"
              ls -la timelapse/
              exit 1
            fi
          else
            echo "‚ùå Release $TAG not found"
            echo "Available releases:"
            gh release list --repo "$GITHUB_REPOSITORY" --limit 10
            exit 1
          fi

      - name: Cache apt packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: make git zlib1g-dev libssl-dev gperf cmake g++
          version: 1

      - name: Cache TDLib source
        id: cache-tdlib
        uses: actions/cache@v4
        with:
          path: tdlib-source
          key: tdlib-source-${{ runner.os }}-latest
          restore-keys: |
            tdlib-source-${{ runner.os }}-

      - name: Cache Telegram Bot API server
        id: cache-bot-api
        uses: actions/cache@v4
        with:
          path: telegram-bot-api
          key: telegram-bot-api-${{ runner.os }}-built
          restore-keys: |
            telegram-bot-api-${{ runner.os }}-

      - name: Log cache status
        run: |
          echo "=== –°—Ç–∞—Ç—É—Å –∫—ç—à–∞ ==="
          echo "TDLib cache hit: ${{ steps.cache-tdlib.outputs.cache-hit }}"
          echo "Bot API cache hit: ${{ steps.cache-bot-api.outputs.cache-hit }}"
          
          if [ "${{ steps.cache-tdlib.outputs.cache-hit }}" = "true" ]; then
            echo "‚úÖ TDLib –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞"
          else
            echo "üîÑ TDLib –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω –∑–∞–Ω–æ–≤–æ"
          fi
          
          if [ "${{ steps.cache-bot-api.outputs.cache-hit }}" = "true" ]; then
            echo "‚úÖ Bot API –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞"
          else
            echo "üîÑ Bot API –±—É–¥–µ—Ç —Å–æ–±—Ä–∞–Ω –∑–∞–Ω–æ–≤–æ"
          fi

      - name: Get TDLib source
        if: steps.cache-tdlib.outputs.cache-hit != 'true'
        run: |
          # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          rm -rf tdlib-source
          # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π TDLib —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
          git clone --recursive https://github.com/tdlib/td.git tdlib-source
          cd tdlib-source
          # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏–µ—é
          git checkout v1.8.0
          # –û—á–∏—â–∞–µ–º git history –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
          rm -rf .git
          cd ..

      - name: Build Telegram Bot API server
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          rm -rf telegram-bot-api
          # –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Bot API —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
          git clone --recursive https://github.com/tdlib/telegram-bot-api.git
          cd telegram-bot-api
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "Using tag: $LATEST_TAG"
          git checkout $LATEST_TAG
          
          # –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ build –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          rm -rf build
          mkdir build
          cd build
          
          # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ö–æ–¥–Ω–∏–∫–∏ TDLib)
          cmake -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_INSTALL_PREFIX:PATH=.. \
                -DTD_DIR=../../tdlib-source \
                ..
          cmake --build . --target install
          
          # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∫–æ—Ä–µ–Ω—å
          cd ../..
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∏–Ω–∞—Ä–Ω–∏–∫ —Å–æ–∑–¥–∞–ª—Å—è
          ls -l telegram-bot-api/bin/telegram-bot-api*

      - name: Setup Bot API server
        run: |
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
          mkdir -p bot-data
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å (–∏–∑ –∫—ç—à–∞ –∏–ª–∏ —Å–≤–µ–∂–µ—Å–æ–±—Ä–∞–Ω–Ω–æ–µ)
          echo "=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ==="
          if [ -d "telegram-bot-api/bin" ]; then
            echo "‚úÖ Bot API –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ/—Å–æ–±—Ä–∞–Ω"
            ls -la telegram-bot-api/bin/
          else
            echo "‚ùå Bot API –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
          fi
          
          if [ -d "tdlib-source" ]; then
            echo "‚úÖ TDLib –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ"
            ls -la tdlib-source/ | head -5
          else
            echo "‚ùå TDLib –Ω–µ –Ω–∞–π–¥–µ–Ω"
            exit 1
          fi

      - name: Start local Bot API server
        run: |
          # –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
          ./telegram-bot-api/bin/telegram-bot-api --api-id=${{ secrets.TELEGRAM_API_ID }} \
                            --api-hash=${{ secrets.TELEGRAM_API_HASH }} \
                            --local \
                            --dir=./bot-data \
                            --temp-dir=./bot-data/temp \
                            --http-port=8081 &
          
          # –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
          sleep 10
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
          curl -f http://localhost:8081/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/getMe || exit 1

      - name: Check if timelapse exists
        id: check
        run: |
          OUTPUT_FILE="${{ steps.upload-type.outputs.output_file }}"
          if [ -f "timelapse/$OUTPUT_FILE" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "file_size=$(stat -f%z timelapse/$OUTPUT_FILE 2>/dev/null || stat -c%s timelapse/$OUTPUT_FILE)" >> $GITHUB_OUTPUT
            echo "‚úÖ File found: timelapse/$OUTPUT_FILE"
            ls -la "timelapse/$OUTPUT_FILE"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå File not found: timelapse/$OUTPUT_FILE"
            ls -la timelapse/
            exit 1
          fi

      - name: Upload to Telegram
        if: steps.check.outputs.exists == 'true'
        run: |
          OUTPUT_FILE="${{ steps.upload-type.outputs.output_file }}"
          VIDEO_FILE="timelapse/$OUTPUT_FILE"
          
          if [ "${{ steps.upload-type.outputs.type }}" = "weekly" ]; then
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–ª–∞–ø—Å–∞ —Å –¥–∞—Ç–∞–º–∏
            MESSAGE=$(echo -e "üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π —Ç–∞–π–º–ª–∞–ø—Å —Å ${{ steps.format-dates.outputs.formatted_start }} –ø–æ ${{ steps.format-dates.outputs.formatted_end }}\n\n[üé¨ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã–º–∏ —Ç–∞–π–º–ª–∞–ø—Å–∞–º–∏](https://github.com/niklinque/wplace-tomsk-timelapse/)\n[üì∏ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –¥–∞–º–ø–∞–º–∏](https://github.com/niklinque/wplace-tomsk/)")
            
            echo "Uploading weekly timelapse: $MESSAGE"
            
            # –î–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–ª–∞–ø—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ
            curl -X POST "http://localhost:8081/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
                 -F "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
                 -F "document=@${VIDEO_FILE}" \
                 -F "caption=${MESSAGE}" \
                 -F "parse_mode=MARKDOWN" \
                 --max-time 1800 \
                 --retry 3 \
                 --retry-delay 30
          else
            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞–π–º–ª–∞–ø—Å–∞
            MESSAGE=$(echo -e "ü§ñ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Ç–∞–π–º–ª–∞–ø—Å –∑–∞ ${{ steps.format-dates.outputs.formatted_daily }}\n\n[üé¨ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã–º–∏ —Ç–∞–π–º–ª–∞–ø—Å–∞–º–∏](https://github.com/niklinque/wplace-tomsk-timelapse/)\n[üì∏ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –¥–∞–º–ø–∞–º–∏](https://github.com/niklinque/wplace-tomsk/)")
            
            echo "Uploading daily timelapse: $MESSAGE"
            
            # –î–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–æ 2GB)
            curl -X POST "http://localhost:8081/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
                 -F "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
                 -F "document=@${VIDEO_FILE}" \
                 -F "caption=${MESSAGE}" \
                 -F "parse_mode=MARKDOWN" \
                 -F "disable_content_type_detection=true" \
                 --max-time 1800 \
                 --retry 3 \
                 --retry-delay 30
          fi

      - name: Cleanup
        if: always()
        run: |
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä Bot API
          pkill -f telegram-bot-api || true
          # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          rm -rf timelapse/ bot-data/ || true