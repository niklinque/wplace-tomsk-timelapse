name: Generate daily timelapse

on:
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  timelapse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Compute yesterday date
        id: dates
        shell: bash
        run: |
          python - << 'PY'
          from datetime import datetime, timedelta
          import os
          from zoneinfo import ZoneInfo
          with open('config.py', 'r', encoding='utf-8') as f:
            for line in f:
              if line.strip().startswith('TIMEZONE'):
                timezone = line.split('"')[1]
                break
          target_tz = ZoneInfo(timezone)
          y = datetime.now(target_tz) - timedelta(days=1)
          out = f"date={y.strftime('%Y%m%d')}\n"
          with open(os.environ['GITHUB_OUTPUT'], 'w', encoding='utf-8') as f:
              f.write(out)
          PY

      - name: Sparse checkout yesterday folder from source repo
        shell: bash
        run: |
          set -e
          YDATE='${{ steps.dates.outputs.date }}'
          echo "Fetching dumps for ${YDATE}"
          REPO=$(grep '^SOURCE_REPO' config.py | cut -d '"' -f 2)
          rm -rf tmp_wplace
          git clone --filter=blob:none --no-checkout S{REPO}.git tmp_wplace
          cd tmp_wplace
          git sparse-checkout init --cone
          git sparse-checkout set output/${YDATE}
          git checkout main
          cd ..
          mkdir -p output
          if [ -d "tmp_wplace/output/${YDATE}" ]; then
            rm -rf "output/${YDATE}"
            cp -r "tmp_wplace/output/${YDATE}" "output/${YDATE}"
            echo "found=true" >> $GITHUB_OUTPUT
          else
            echo "No dumps found for ${YDATE}"
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Create timelapse
        id: make
        shell: bash
        run: |
          set -e
          if [ "${{ steps.dates.outputs.date }}" = "" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          if [ ! -d "output/${{ steps.dates.outputs.date }}" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          python create_timelapse.py --date "${{ steps.dates.outputs.date }}"

      - name: Publish timelapse to GitHub Release
        if: steps.make.outputs.skip != 'true'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          DATE='${{ steps.dates.outputs.date }}'
          TAG="timelapse-${DATE}"
          TITLE="Таймлапс за ${DATE}"
          FILE="timelapse/timelapse_${DATE}.mp4"
          if [ ! -f "$FILE" ]; then
            echo "File not found: $FILE"
            exit 1
          fi
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG exists, uploading asset (overwrite if exists)"
            gh release upload "$TAG" "$FILE" --clobber
          else
            echo "Creating release $TAG and uploading asset"
            gh release create "$TAG" "$FILE" --title "$TITLE" --latest=false --notes "Automated timelapse for ${DATE}"
          fi

      - name: Check Telegram token
        id: check-token
        run: |
          if [ -n "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
          fi

      - name: Trigger Telegram upload
        if: steps.make.outputs.skip != 'true' && steps.check-token.outputs.has_token == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'telegram-upload.yml',
              ref: 'main',
              inputs: {
                date: '${{ steps.dates.outputs.date }}'
              }
            });


